#!/usr/bin/env ruby

#
# movies
#
# Created by Quintis Venter on 2012-06-10.
# Copyright 2012 Loopy Logic. All rights reserved.
#
# Purpose: List movies matching the specified pattern.
#          Changelog at bottom of file.
#

class String
  def to_regexp
    Regexp.new(self, true)
  end
end

# ----------------------------------------------------------------------------
# Config & Helpers
# ----------------------------------------------------------------------------

OPTS = {
  media_dirs: ['/Volumes/media/movies', "ENV['HOME']/Movies"]
  name_width: 55,
  year_width: 5,
  ext_width: 5,
  size_width: 7,
  patterns: {
    :year       => /\((\d{4})\)/,
    :extension  => /\.(\w+)$/,
    :file_name  => /([\w\s-]*)?/,
    :default    => /.*/
  },
  formats: %w( avi divx mpeg mpg xvid mp4 mkv )
}

class String
  def to_regexp   # used by Regex.try_convert
    Regexp.new(self, true)
  end
end

def movie_name(name)
  movie = file_name(name)
  movie.gsub ' - ', ': '
end

def file_name(file)
  if file =~ OPTS[:patterns][:file_name] and !File.directory?(file)
    return $1 unless $1.length > OPTS[:name_width]
    return $1[0..OPTS[:name_width] - 4] + "..."
  end
  file
end

def file_extension(file)
  return $1 if file =~ OPTS[:patterns][:extension]
end

def file_year(file)
  return $1 if file =~ OPTS[:patterns][:year]
  '----'
end

def file_size(size)
  size / 1024 / 1024
end

def print_header arr, re
  print "\n#{arr.count}"
  if ARGV.count > 0
    puts " match(es) for #{re}"
  else
    puts " match(es).\n(No arguments given, defaulting to #{OPTS[:patterns][:default]})"
  end
  puts
end

# ----------------------------------------------------------------------------
# Work
# ----------------------------------------------------------------------------

require 'date'

regexp = ARGV.count == 1 ? Regexp.try_convert(ARGV[0]) : OPTS[:patterns][:default]
movies = []

Dir.glob('/Volumes/Media/Movies/**/*').each do |file|
  movies << file if regexp =~ file and !File.directory?(file) and OPTS[:formats].include?(file_extension(file))
end

movies.select! { |movie| file_size(File.size(movie)) < 900 and !movie.index(/\[\d{3,4}p\]/) and !movie.index(/[mp4|mkv]$/) }

print_header movies, regexp
puts "%-#{OPTS[:name_width]}s | %-#{OPTS[:year_width]}s | %-#{OPTS[:ext_width]}s | %#{OPTS[:size_width]}s" % ["Name", "Year", "Ext", "Size"]
puts "-" * (OPTS[:name_width] + OPTS[:year_width] + OPTS[:ext_width] + OPTS[:size_width] + 9)
movies.each do |m|
  puts "%-#{OPTS[:name_width]}s | %-#{OPTS[:year_width]}s | %-#{OPTS[:ext_width]}s | %#{OPTS[:size_width]}s" %
    [movie_name(File.basename(m)), file_year(m), file_extension(m), "#{file_size(File.size(m))} MB"]
end
puts

# ----------------------------------------------------------------------------
# TODO
# ----------------------------------------------------------------------------
# TODO accept cli args for basic options hardcoded in the OPTS hash
# TODO accept media attribute limits as cli arguments
# TODO summarize size and make its scale dynamic
# CHANGED parameterize display widths
